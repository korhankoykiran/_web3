//SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract toDoList{
    struct Todo{
        string text;
        bool completed;
    }
    Todo[] public todos;

    function create(string calldata _text) external{
    todos.push(Todo({
        text: _text,
        completed: false
    }));
    }
 
    function updateText(uint _index, string calldata _text) external{
        todos[_index].text = _text;

        //Todo storage todo = todos[_index];
        //todo.text = _text;

        //Those two lines of code do the same exact thing. But if you have one fuel first line of code is cheaper way.
        //But if you have multiple fuels that you need to update. Second one was going to be a cheaper way.
    }

    function get(uint _index) external view returns (string memory, bool) {
        Todo storage todo = todos[_index];
        return (todo.text, todo.completed);
        /*For this example, we don't need this function. When we compile and deploy the contract 
        solidity provides us a function to get the to do list. But let's do it for an example */ 
    }
    function toggleCompleted(uint _index) external{

        todos[_index].completed = !todos[_index].completed;
    }
}
